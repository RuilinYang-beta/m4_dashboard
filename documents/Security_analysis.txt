There are two major security risks with a webapp with database:
-Cross site scripting
-SQL injection


======== XSS (cross site scripting): ========
Cross Site Scripting results in client browser trusting server. Attacker can achieve it in the following two ways: 
1. One is to store data with malicious script in the application database, so that when the data is retrieved by client, the malicious script will be executed in the client browser. 
**This would not happen in our application, we don't allow SQL injection(see the analysis below); user can only choose between the options that we offer, thus attackers have no chance in storing malicious script in our database.** 

2. The other way is attacker can trick user to visit url that contains malicious script, so that the reflected url from server will partly be intepreted as script and get executed. 
**This would also not happen, because the field related to user input (the filter options) is retrieving data using POST method, even if attacker somehow succeed in tricking the user to visit url with script, the server knows that's not a valid url thus will not reflect the url back to user.**


======== SQLi (SQL injection) ========
This phenomenon occurs when SQL commands are appended by user input, and the user writes malicious queries. Our solution is the 
same as with XSS: never see user input as command. The webapp handles the input as String and immediately sends it to the server.
The server will Give this input as a string to a query (a preparedStatement), so that our database knows that it is to be seen as
a string. The classic example is of course with name: "Fred'; DROP TABLE Students --", but if our server gets such an input/command,
it will see it as a string, send it as string to the database, and the database will save it as a string, preventing any
and all SQL injection.

The webapp is of course not perfect, and although we checked the security risks, we probably missed some. However we do assume that
the only people that can access the webapp are Cofano employees (since they are the only ones authorized) and we assume that they don't
want to compromise their own webapp.

We unfortunately didn't manage to secure our http requests, since neither of us has the knowledge to use SSL or TLS certificates. This
leaves an unfortunate hole that allows some dataleak to happen, but upon delivery, it will run on Cofano's secure servers, as determined in first interview.
